trigger:
  branches:
    include:
    - master
    - infra/*
  paths:
    include:
    - infrastructure/*
    - build/infrastructure_pipeline.yml
    exclude:
    - /**/*.md

jobs:

# -----------------------------------------------------------------------------
# ValidateStructure :
# - Convert files dos2unix
# - yaml lint infrastructure definitions
# -----------------------------------------------------------------------------
- job: ValidateStructure
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:

    # Install tools
    - task: Bash@3
      inputs:
          targetType: 'inline'
          script: |
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install virtualenv
            python -m virtualenv ansible-2.9.6
            source ansible-2.9.6/bin/activate
            python -m pip install -r tools/ansible/venv_requirements.txt
            sudo apt-get install dos2unix
      displayName: 'Install tools'

    # Convert files dos2unix
    - task: Bash@3
      inputs:
          targetType: 'inline'
          workingDirectory: .
          script: |
            find infrastructure/definitions/ -type f -not -path '*/\.*' -exec grep -Il '.' {} \; | xargs -d '\n' -L 1 dos2unix -k
      displayName: 'Convert files dos2unix'

    # yaml lint ansible code
    - task: Bash@3
      inputs:
          targetType: 'inline'
          workingDirectory: infrastructure/definitions
          script: |
            source ../../ansible-2.9.6/bin/activate
            yamllint -c ../.yamllint .
      displayName: 'Yaml lint'


# -----------------------------------------------------------------------------
# IdentifyApplications
# -----------------------------------------------------------------------------
- job: IdentifyApplications
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: ValidateStructure

  condition:   and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  steps:

    - task: Bash@3
      inputs:
          targetType:       'inline'
          workingDirectory: 'tools/ansible'
          script: |
            echo "***************************************************************"
            export
            echo "***************************************************************"
            echo "***************************************************************"

            # git diff-tree --no-commit-id --name-only -r $BUILD_SOURCEVERSION
            branch_name=$(echo "$BUILD_SOURCEBRANCH" | sed "s/refs\/heads\///")
            git diff --name-only origin/master $branch_name

            # modifications=$(git diff-tree --no-commit-id --name-only -r $BUILD_SOURCEVERSION)
            modifications=$(git diff --name-only origin/master $branch_name)

            echo "***************************************************************"
            echo "modifications : $modifications"
            echo "***************************************************************"
            for file in $modifications
            do
              echo "Found file : $file"
              directory=($dirname "$file")
              if [[ $directory == *"infrastructure/definitions"* ]]; then
                application_name=$(basename $file .yml)
                echo "Found application definition : $application_name"
                applications=$applications,"'$application_name':{'application_name':'$application_name'}"
              fi
            done

            if [[ -z "$applications" ]]; then
              echo "No application definiton modified"
              exit 1
            else
              applications=${applications:1}
              applications={$applications}
              echo "Matrix variables : $applications"
              echo "##vso[task.setvariable variable=applications;isOutput=true]$applications"
            fi

            echo "***************************************************************"
            export
      name:        'GetMatrixVariables'
      displayName: 'Export variables'

# -----------------------------------------------------------------------------
# BuildInfrastructure
# -----------------------------------------------------------------------------
- job: BuildInfrastructure
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: IdentifyApplications
  strategy:
    matrix: $[ dependencies.IdentifyApplications.outputs['GetMatrixVariables.applications'] ]

  condition:   and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

  steps:

    # Checkout the repository and keep git credential
    - checkout:           self
      clean:              true
      submodules:         true
      persistCredentials: true

    - task: UsePythonVersion@0
      inputs:
          versionSpec:  '2.7'
          architecture: 'x64'

    # - task: AzureKeyVault@1
    #   inputs:
    #     azureSubscription: 'Visual Studio Enterprise (62177529-73f0-4e11-a584-5d3526dc6999)'
    #     keyVaultName:  'mesfVault'
    #     secretsFilter: 'Ansible-Automation'

    - task: Bash@3
      inputs:
          targetType: 'inline'
          script: |
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install virtualenv
            python -m virtualenv ansible-2.9.6
            source ansible-2.9.6/bin/activate
            python -m pip install -r tools/ansible/venv_requirements.txt
            sudo apt-get install dos2unix
      displayName: 'Install tools'

    - task: Bash@3
      inputs:
          targetType:       'inline'
          workingDirectory: 'tools/ansible'
          script: |
            source ../../ansible-2.9.6/bin/activate
            ansible-playbook 00-generate-application-servers.yml -e application=$(application_name)
      displayName: 'Execute ansible'
      condition:   and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))

    - task: Bash@3
      inputs:
          targetType:       'inline'
          workingDirectory: '.'
          script: |
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            branch_name=$(echo "$BUILD_SOURCEBRANCH" | sed "s/refs\/heads\///")
            echo "***************************************************************"
            echo "Current branch : $branch_name"
            echo "***************************************************************"

            git checkout -b $branch_name
            git branch --set-upstream-to=origin/$branch_name infra/app1

            git ls-files infrastructure/generated -o --exclude-standard | xargs -i git add '{}'
            git add infrastructure/generated
            git status
            git commit -m "Automatic Generated servers [skip ci]"
            git pull origin/$branch_name $branch_name
            git push --set-upstream origin $branch_name
      displayName: 'Commit application server generations'
      condition:   and(succeeded(), ne(variables['Build.Reason'], 'PullRequest'))
