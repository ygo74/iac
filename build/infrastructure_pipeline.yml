---
trigger:
  batch: true
  branches:
    include:
    - master
    - infra/*
  paths:
    include:
    - infrastructure/definitions/*
    - build/infrastructure_pipeline.yml
    exclude:
    - /**/*.md

pr:
  autoCancel: true
  branches:
    include:
    - master
  paths:
    include:
    - infrastructure/definitions/*
    exclude:
    - /**/*.md

variables:
  runNumber: $[counter(variables['build.reason'], 0)]

jobs:
# -----------------------------------------------------------------------------
# IdentifyNextVersion
# -----------------------------------------------------------------------------
- job: IdentifyNextVersion
  displayName: "Identify Next version from tags"
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:

    - task: Bash@3
      displayName: 'Identify Next Version'
      inputs:
          targetType:       'inline'
          workingDirectory: '.'
          script: |
            echo "***************************************************************"
            echo "Read version Major.Minor in version.yml"
            echo "***************************************************************"

            mainVersion=$(grep -oP "^version: \K(\d+\.)\d+$" infrastructure/version.yml)
            if [[ -z "$mainVersion" ]]; then
              echo "##vso[task.logissue type=error]No Main version (version: Major.minor) provided in infrastructure/version.yml"
              exit 1
            fi

            echo "***************************************************************"
            echo "Find latest tag for pattern $mainVersion"
            echo "***************************************************************"
            lastTag=$(git tag -l "${mainVersion}*" --sort=v:refname | tail -1 )

            if [[ -z "$lastTag" ]]; then
               echo "No Last Tag exist for pattern $mainVersion"
               nextVersion="${mainVersion}.0"
            else
               echo "Last Tag exist for pattern $mainVersion : $lastTag"
               nextVersion=$(echo $lastTag  | awk -F"." 'BEGIN{OFS=".";} {$NF+=1; print $0}')
            fi
            echo "Next version is : $nextVersion"

            if [[ -z "$nextVersion" ]]; then
              echo "##vso[task.logissue type=error]No next version found!!!"
              exit 1
            fi

            echo "##vso[build.updatebuildnumber]$nextVersion-r$(runNumber)"


# -----------------------------------------------------------------------------
# IdentifyApplications
# -----------------------------------------------------------------------------
- job: IdentifyApplications
  displayName: "Identify applications'definition updated or created"
  dependsOn: IdentifyNextVersion
  pool:
    vmImage: 'Ubuntu-16.04'

  steps:

    - task: Bash@3
      inputs:
          targetType:       'inline'
          workingDirectory: 'tools/ansible'
          script: |
            echo "***************************************************************"
            export
            echo "***************************************************************"
            echo "***************************************************************"

            # git diff-tree --no-commit-id --name-only -r $BUILD_SOURCEVERSION
            branch_name=$(echo "$BUILD_SOURCEBRANCH" | sed "s/refs\/heads\///")
            git checkout -b $branch_name
            # git branch --set-upstream-to=origin/$branch_name $branch_name

            # identify comparaison
            refCompare="origin/master"
            if [[ $branch_name == *"master"* ]]; then
              # Current branch is master
               echo "Current branch is master"
               existingTag=$(git tag -l --sort=v:refname | tail -1 )
               if [[ -z "$existingTag" ]]; then
                    # No tag exists, find modification from first commit in master
                    echo "No tag exists, find modification from first commit in master"
                    refCompare=$(git log master --pretty=format:"%H"  | tail -1)
               else
                    # Tag exists, find modification from last tag $existingTag
                    echo "Tag exists, find modification from last tag $existingTag"
                    refCompare=$existingTag
               fi
            else
              # Current branch is not master
              echo "Current branch is not master : $branch_name"
            fi

            # Find modifications in application definition
            echo "Find Modifications between $refCompare and $branch_name"
            modifications=$(git diff --name-only $refCompare $branch_name | grep infrastructure/definitions)
            echo "***************************************************************"
            echo "modifications : $modifications"
            echo "***************************************************************"

            # Init applications matrix for the build
            for file in $modifications
            do
              echo "Found file : $file"
              directory=($dirname "$file")
              if [[ $directory == *"infrastructure/definitions"* ]]; then
                application_name=$(basename $file .yml)
                echo "Found application definition : $application_name"
                applications=$applications,"'$application_name':{'application_name':'$application_name'}"
              fi
            done

            if [[ -z "$applications" ]]; then
              echo "##vso[task.logissue type=warning]No application definiton modified"
              echo "##vso[task.setvariable variable=skipsubsequent;isOutput=true]true"
              exit 0
            else
              applications=${applications:1}
              applications={$applications}
              echo "Matrix variables : $applications"
              echo "##vso[task.setvariable variable=applications;isOutput=true]$applications"
            fi

            echo "***************************************************************"
      name:        'GetMatrixVariables'
      displayName: 'Init Application Matrix'

# -----------------------------------------------------------------------------
# BuildInfrastructure
# -----------------------------------------------------------------------------
- job: BuildInfrastructure
  displayName: "Build Application infrastructure"
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: IdentifyApplications
  condition: >-
    and(
        succeeded(),
        ne(dependencies.IdentifyApplications.outputs['GetMatrixVariables.skipsubsequent'], 'true')
       )
  workspace:
    clean: all
  strategy:
    matrix: $[ dependencies.IdentifyApplications.outputs['GetMatrixVariables.applications'] ]

  steps:

    # Checkout the repository and keep git credential
    - checkout:           self
      clean:              true
      submodules:         true
      persistCredentials: true

    - task: UsePythonVersion@0
      inputs:
          versionSpec:  '2.7'
          architecture: 'x64'

    # - task: AzureKeyVault@1
    #   inputs:
    #     azureSubscription: 'Visual Studio Enterprise (62177529-73f0-4e11-a584-5d3526dc6999)'
    #     keyVaultName:  'mesfVault'
    #     secretsFilter: 'Ansible-Automation'

    - task: Bash@3
      inputs:
          targetType: 'inline'
          script: |
            python -m pip install --upgrade pip setuptools wheel
            python -m pip install virtualenv
            python -m virtualenv ansible-2.9.6
            source ansible-2.9.6/bin/activate
            python -m pip install -r tools/ansible/venv_requirements.txt
            sudo apt-get install dos2unix
      displayName: 'Install tools'

    # Convert files dos2unix
    - task: Bash@3
      inputs:
          targetType: 'inline'
          workingDirectory: infrastructure/definitions
          script: |
            # find infrastructure/definitions/ -type f -not -path '*/\.*' -exec grep -Il '.' {} \; | xargs -d '\n' -L 1 dos2unix -k
            dos2unix $(application_name).yml
      displayName: 'Convert files dos2unix'

    # yaml lint ansible code
    - task: Bash@3
      inputs:
          targetType: 'inline'
          workingDirectory: infrastructure/definitions
          script: |
            source ../../ansible-2.9.6/bin/activate
            yamllint -c ../.yamllint $(application_name).yml
      displayName: 'Yaml lint'

    - task: Bash@3
      inputs:
          targetType:       'inline'
          workingDirectory: 'tools/ansible'
          script: |
            source ../../ansible-2.9.6/bin/activate
            ansible-playbook -i localhost,k 00-generate-application-servers.yml -e application=$(application_name) -e application_servers_path='$(Build.ArtifactStagingDirectory)'
      displayName: 'Execute ansible'


    - task: PublishBuildArtifacts@1
      inputs:
        pathtoPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName:  '$(application_name)'


# -----------------------------------------------------------------------------
# Synchronize result
# -----------------------------------------------------------------------------
- job: SyncInventory
  displayName: "Synchronize generated inventories"
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: BuildInfrastructure
  workspace:
    clean: all
  condition:   and(succeeded(),
                    ne(variables['Build.Reason'], 'PullRequest'),
                    ne(variables['Build.SourceBranchName'], 'master')
                  )

  steps:


    # Checkout the repository and keep git credential
    - checkout:           self
      clean:              true
      submodules:         true
      persistCredentials: true

    - task: DownloadBuildArtifacts@0
      displayName: 'Download Build Artifacts'
      inputs:
        downloadPath: 'infrastructure/generated'
        downloadType: 'all'

    - task: Bash@3
      inputs:
          targetType:       'inline'
          workingDirectory: '.'
          script: |
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            branch_name=$(echo "$BUILD_SOURCEBRANCH" | sed "s/refs\/heads\///")
            echo "***************************************************************"
            echo "Current branch : $branch_name"
            echo "***************************************************************"

            git checkout -b $branch_name
            git branch --set-upstream-to=origin/$branch_name $branch_name

            git ls-files infrastructure/generated -o --exclude-standard | xargs -i git add '{}'
            git add infrastructure/generated
            git status
            # git commit -m "Automatic Generated servers [skip ci]"
            git commit -m "Automatic Generated servers"
            git pull
            git push --set-upstream origin $branch_name
      displayName: 'Commit application server generations'

# -----------------------------------------------------------------------------
# Tag master build
# -----------------------------------------------------------------------------
- job: TagMaster
  displayName: "Tag Master with new version $(BuildNumber)"
  pool:
    vmImage: 'Ubuntu-16.04'
  dependsOn: BuildInfrastructure
  workspace:
    clean: all
  condition:   and(succeeded(),
                    eq(variables['Build.Reason'], 'BatchedCI'),
                    eq(variables['Build.SourceBranchName'], 'master')
                  )

  steps:

    - task: Bash@3
      inputs:
          targetType:       'inline'
          workingDirectory: '.'
          script: |
            echo "$BUILD_BUILDNUMBER"

    # Checkout the repository and keep git credential
    - checkout:           self
      clean:              true
      submodules:         true
      persistCredentials: true

    - task: Bash@3
      inputs:
          targetType:       'inline'
          workingDirectory: '.'
          script: |
            git config --global user.email "you@example.com"
            git config --global user.name "Your Name"
            branch_name=$(echo "$BUILD_SOURCEBRANCH" | sed "s/refs\/heads\///")
            echo "***************************************************************"
            echo "Current branch : $branch_name"
            echo "***************************************************************"

            git checkout -b $branch_name
            git branch --set-upstream-to=origin/$branch_name $branch_name

            git tag $BUILD_BUILDNUMBER
            git push origin --tags

      displayName: 'Push Tag'
